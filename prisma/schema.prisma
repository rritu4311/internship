// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  password      String?      // Added for credential login
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String       @default("user")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  profile       Profile?
  applications  Application[]
  company       Company?
  notifications Notification[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  resume          String?
  skills          String[]
  education       Json[]
  experience      Json[]
  phoneNumber     String?
  location        String?
  linkedinProfile String?
  githubProfile   String?
  portfolioUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Company {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  logo        String?
  website     String?
  location    String?
  industry    String?
  size        String?
  ownerId     String      @unique @db.ObjectId
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  internships Internship[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Internship {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  companyId       String        @db.ObjectId
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location        String
  locationType    String        @default("onsite") // onsite, remote, hybrid
  duration        Int           // in weeks
  stipend         Int?
  skills          String[]
  responsibilities String[]
  qualifications  String[]
  startDate       DateTime?
  applicationDeadline DateTime?
  status          String        @default("open") // open, closed, filled
  applications    Application[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Application {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  internshipId String     @db.ObjectId
  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  status       String     @default("pending") // pending, reviewing, accepted, rejected
  coverLetter  String?
  resumeUrl    String?
  answers      Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([internshipId, userId])
}

model Resource {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  type        String
  url         String?
  tags        String[]
  isFree      Boolean  @default(true)
  rating      Float?
  views       Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // e.g., application_status, new_application
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}